= Christian Neukirchen's Ruby Style Guide
= Christian Neukirchen 的 Ruby 编程风格指南

You may not like all rules presented here, but they work very well for
me and have helped producing high quality code.  Everyone is free to
code however they want, write and follow their own style guides, but
when you contribute to my code, please follow these rules:
也许你不会同意本文提到的所有规则，但是这些规则确实帮助我产生了高质量的
代码，对我来说很有用。任何人都可以随其所想，根据其自己的编码风格去写代
码，但是，当你提代码到我的项目里时，请遵守这些规则：


== Formatting:
== 格式：

* Use ASCII (or UTF-8, if you have to).
* 使用 ASCII（或者 UTF-8，如果你不得不用的话）。

* Use 2 space indent, no tabs.
* 使用2个空格做缩进，不要用 tab。

* Use Unix-style line endings.
* 使用 Unix 风格的换行做行尾。

* Use spaces around operators, after commas, colons and semicolons,
  around { and before }.
* 在操作符两边，逗号、冒号、分号的后面，{ 的两侧和 } 的前面，加入空格。

* No spaces after (, [ and before ], ).
* 在 (、[ 之后和 ]、) 之前没有空格。

* Use two spaces before statement modifiers (postfix
  if/unless/while/until/rescue).
* 在声明修饰符前加入两个空格（在 if/unless/while/until/rescue 的后面）

* Indent when as deep as case.
* 按照情形进行缩进，不要过多缩进。

* Use an empty line before the return value of a method (unless it
  only has one line), and an empty line between defs.
* 在方法的 return 语句前留一个空行（除非只有一行），在 def 前后都留一个
  空行。

* Use RDoc and its conventions for API documentation.  Don't put an
  empty line between the comment block and the def.
* 使用 RDoc 及其约定来写 API 文档。不要在注释块和 def 间留任何空行。

* Use empty lines to break up a long method into logical paragraphs.
* 使用空行，将一个很长的方法按逻辑分段。

* Keep lines fewer than 80 characters.
* 每行不要超过80个字符。

* Avoid trailing whitespace.
* 杜绝行尾空格。


== Syntax:
== 语法：

* Use def with parentheses when there are arguments.
* 如果有参数时，def 后面要用括号包住参数。

* Never use for, unless you exactly know why.
* 永远不要用 for，除非你确确实实知道你在做啥。

* Never use then.
* 永远不要用 then 。

* Use when x; ... for one-line cases.
* 在条件语句只有一行的情况下，使用 when x; ...

* Use &&/|| for boolean expressions, and/or for control flow.  (Rule
  of thumb: If you have to use outer parentheses, you are using the
  wrong operators.)
* 在布尔表达式里使用 &&/||，在程序流程控制里使用 and/or。（小提示：如
  果你不得不在最外层加括号，那你就用错操作符了。）

* Avoid multiline ?:, use if.
* 杜绝多行使用 ?: ，多行的情况下应该用 if 。

* Suppress superfluous parentheses when calling methods, but keep them
  when calling "functions", i.e. when you use the return value in the
  same line.
* 在调用方法的时候，绝不能使用多余的括号（参数最外面不用括号），但是在调
  用“函数”时使用括号，比如，当你在一行里需要使用函数的返回值。

    x = Math.sin(y)
    array.delete e

* Prefer {...} over do...end.  Multiline {...} is fine: having
  different statement endings (} for blocks, end for if/while/...)
  makes it easier to see what ends where.  But use do...end for
  "control flow" and "method definitions" (e.g. in Rakefiles and
  certain DSLs.)  Avoid do...end when chaining.
* 使用 {...} 好过 do...end 。多行情况使用 {...} 也很好：可以用不同的结束
  符标识不同的内容（用 } 标识块，而 end 标识 if/while/... ），这样可以很
  容易看出到哪里结束。不过在“程序流程控制”和“定义方法”时使用 do...end（比
  如，在 Rakefiles 和特定的 DSL 里）。在链式调用时杜绝 do...end 。

* Avoid return where not required.
* 杜绝无谓的 return。

* Avoid line continuation (\) where not required.
* 杜绝无谓的续行符（\）。

* Using the return value of = is okay:
* 可以直接使用 = 运算符返回的值：

    if v = array.grep(/foo/) ...

* Use ||= freely.
* 请自由使用 ||=。

* Use non-OO regexps (they won't make the code better).  Freely use
  =~, $0-9, $~, $` and $' when needed.
* 使用非 OO 风格的正则表达式（ OO 风格不会让你的代码变得更好）。在需要的
  时候，自由使用 =~，$0-9，$` 和 $'。


== Naming:
== 命名：

* Use snake_case for methods.
* 方法名使用 snake_case 风格。

* Use CamelCase for classes and modules.  (Keep acronyms like HTTP,
  RFC, XML uppercase.)
* 类名和模块名使用 CamelCase 风格。（常用首字母缩写保持大写，比如HTTP，
  RFC，XML）

* Use SCREAMING_SNAKE_CASE for other constants.
* 其他常量使用 SCREAMING_SNAKE_CASE 。

* The length of an identifier determines its scope.  Use one-letter
  variables for short block/method parameters, according to this
  scheme:
* 标识符名字的长度决定了其生存周期。在短小的块/方法里，使用单字母变量作为
  参数，具体名字如下：

    a,b,c: any object
    d: directory names
    e: elements of an Enumerable
    ex: rescued exceptions
    f: files and file names
    i,j: indexes
    k: the key part of a hash entry
    m: methods
    o: any object
    r: return values of short methods
    s: strings
    v: any value
    v: the value part of a hash entry
    x,y,z: numbers
    a,b,c：任意对象
    d：目录名字
    e：Enumerable的元素
    ex：截获的异常
    f：文件对象和文件名
    i,j：索引
    k：哈希项的键值部分
    m：方法
    o：任意对象
    r：短函数的返回值
    s：字符串
    v：任意值
    v：哈希项的值部分（和上面一个有毛区别啊！）
    x,y,z：数字

  And in general, the first letter of the class name if all objects
  are of that type.
  另外，通常来说，如果使用变量时，其值的所有对象都是某个类型，用类名的首
  字母来表示。

* Use _ or names prefixed with _ for unused variables.
* 对用不到的变量，使用 _ 或者用 _ 做前缀的名字。

* When using inject with short blocks, name the arguments |a, e|
  (mnemonic: accumulator, element)
* 当使用带有短块的注入时，对变量命名 |a, e|（方便助记：累加，元素）

* When defining binary operators, name the argument "other".
* 当定义二值操作符时，将第二个参数命名为“other”。

* Prefer map over collect, find over detect, find_all over select,
  size over length.
* 优先使用 map 而不是 collect ，优先使用 find 而不是 detect ，优先使用 find_all
  而不是 select ，优先使用 size 而不是 length 。


== Comments:
== 注释：

* Comments longer than a word are capitalized and use punctuation.
  Use two spaces after periods.
* 比一个单词长的注释，每句话要首字母大写，并且使用标点。每段后用两个空格
  分隔。

* Avoid superfluous comments.
* 杜绝在注释里灌水。


== The rest:
== 其他：

* Write ruby -w safe code.
* 写对 ruby -w 安全的代码。

* Avoid hashes-as-optional-parameters.  Does the method do too much?
* 杜绝将哈希表作为可选参数的行为。这个方法是不是干的事情太多了？

* Avoid long methods.
* 杜绝过长的方法。

* Avoid long parameter lists.
* 杜绝太长的参数列表。

* Use def self.method to define singleton methods.
* 使用 def self.method 这种方式定义单例（singleton）方法。

* Add "global" methods to Kernel (if you have to) and make them private.
* 将“全局”方法加入到 Kernel （如果你不得不写“全局”方法的话），并将其设为私有的。

* Avoid alias when alias_method will do.
* 如果 alias_method 可以做，就不要使用 alias 。

* Use OptionParser for parsing complex command line options and
  ruby -s for trivial command line options.
* 使用 OptionParser 来解析复杂的命令行参数，并用 ruby -s 明确指定命令行参数。

* Write for 1.8, but avoid doing things you know that will break in 1.9.
* 在1.8下编码，但不要做任何可能导致在1.9下不可用的事情。（那直接用1.9不就行了）

* Avoid needless metaprogramming.
* 杜绝没用的元编程。


== General:
== 一般：

* Code in a functional way, avoid mutation when it makes sense.
* 用函数编程的方式写代码，如果可行的话就杜绝可变量。

* Do not mutate arguments unless that is the purpose of the method.
* 除非函数的意图就是改变参数值，否则不要这么做。

* Do not mess around in core classes when writing libraries.
* 写库的时候，不要把核心类弄乱。

* Do not program defensively.
  (See http://www.erlang.se/doc/programming_rules.shtml#HDR11.)
* 不要使用防御式编程。
  （参见 http://www.erlang.se/doc/programming_rules.shtml#HDR11 ）

* Keep the code simple.
* 保持代码简单。

* Don't overdesign.
* 别做过度设计。

* Don't underdesign.
* 也别不设计。

* Avoid bugs.
* 杜绝 bugs。（别逗了！）

* Read other style guides and apply the parts that don't dissent with
  this list.
* 阅读其他的风格指导，并且接受与本指导不冲突的部分。

* Be consistent.
* 保持前后一致。

* Use common sense.
* 使用常识。
